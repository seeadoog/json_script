[
  {
    "data":[0,1,2,3,4,5,6,7,8,9],
    "key":"arr"
  }
  ,
  {
    "func":"bsearch(arr,n)",
    "do":[
      "lo=0",
      "hi=add(len(arr),-1)",
      {
        "for":"le(lo,hi)",
        "do":[
          "mid=div(add(lo,hi),2,-1)",
          {
            "if":"eq(get(arr,mid),n)",
            "then":[
              "return(mid)"
            ]
          },
          {
            "if":"lt(get(arr,mid),n)",
            "then":"lo=add(mid,1)",
            "else":"hi=mid"
          }
        ]
      },
      "return(-1)"
    ]
  },
  "print(bsearch(arr,8))",
  {
    "data":[
      {"arg":0, "want":0},
      {"arg":1, "want":1},
      {"arg":2, "want":2},
      {"arg":3, "want":3},
      {"arg":4, "want":4},
      {"arg":5, "want":5},
      {"arg":6, "want":6},
      {"arg":7, "want":7},
      {"arg":8, "want":8},
      {"arg":9, "want":19}
    ],
    "key":"test_case"
  },
  {
    "for":"k,v in test_case",
    "do":[
      "act=bsearch(arr,v.arg)",
      {
        "if":"eq(act,v.want)",
        "then":"print('case passed')",
        "else":"print('case not passed,expect:',v.want,'actual:',act)"
      }
    ]
  },
  {
    "func":"push_s(s,data)",
    "do":[
      "old=s.top",
      "s.top=new()",
      "s.top.data=data",
      "s.top.next=old"
    ]
  },
  {
    "func":"pop(s)",
    "do":[
      "d=s.top",
      "s.top=s.top.next",
      "return(d.data)"

    ]
  },
  "stack=new()",
  "push_s(stack,1)",
  "push_s(stack,2)",
  "push_s(stack,3)",
  "print(pop(stack))",
  "print(pop(stack))",
  "print(pop(stack))"

]